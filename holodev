#!/bin/sh

: <<=cut
=head1 NAME

holodev - tool that makes it easier the creation Linux containers

=head1 SYNOPSIS

   holodev <COMMAND> [OPTIONS] -- <lxc-options>

COMMAND: attach, create, destroy, info, list, restart, run, start, setup, stop, snapshot

OPTIONS: --no-branch,
         --branch <branch-name> | -b <branch-name>,
         --dummy,
         --release <debian-codename> | -r <debian-codename>,
         --version,
         --all

=head1 DESCRIPTION

A tool to facilitate the creation of GNU/Linux Containers running Debian
system aimed to be used as a development environment.

=cut

VERSION=1.1
HOST_USER=$USER
HOST_UID=$(id -u $USER)
CURRENT_DIRECTORY=$(basename `pwd`)
DEBIAN_RELEASE=stretch
INVALID_OPTIONS=false
NO_GIT_BRANCH=false
GIT_BRANCH=
CONTAINER_NAME=
ARGV_ALL=false
LXC_VERSION=$(lxc-ls --version | sed 's/0$//')
DUMMY_MODE=false
LANG=C
LC_CTYPE=$LANG
ARCH=
HOME_DIRECTORY=HOLODEV
VERBOSE=false
QUIET=false

# Detect OS
if [ -f /etc/lsb-release ]; then
  . /etc/lsb-release
  OS=$DISTRIB_ID
elif [ -f /etc/debian_version ]; then
  OS=Debian
elif [ -f /etc/arch-release ]; then
  OS=Arch
elif [ -f /etc/SuSE-release ]; then
  OS=Suse
elif [ -f /etc/fedora-release ]; then
  OS=Fedora
else
  OS=$(uname -s)
fi

is_under_git_control() {
  git rev-parse --is-inside-work-tree > /dev/null 2>&1
}

if is_under_git_control; then
  GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
fi

previous=
for i in "$@"; do
  case $i in
    attach|create|destroy|info|list|restart|run|start|setup|stop|snapshot)
      COMMAND=$i
      shift
      ;;
    help|--help)
      COMMAND=help
      shift
      ;;
    --no-branch)
      NO_GIT_BRANCH=true
      shift
      ;;
    --branch|-b)
      GIT_BRANCH=$2
      shift 2
      ;;
    --release|-r)
      DEBIAN_RELEASE=$2
      shift 2
      ;;
    --version)
      shift
      echo $VERSION
      exit 0
      ;;
    --dummy)
      DUMMY_MODE=true
      shift
      ;;
    --all)
      ARGV_ALL=true
      shift
      ;;
    --arch)
      ARCH=$2
      shift 2
      ;;
    --verbose)
      VERBOSE=true
      shift
      ;;
    --)
      shift
      LXC_OPTIONS=$@
      shift $#
      break
      ;;
    *)
      if [ -n $previous ] && [ "$previous" = '--arch' ]; then
        # we don't need validation for --arch param
        true
      elif [ -n $previous ] && [ "$previous" = '--release' ]; then
        # we don't need validation for --release param
        true
      elif [ -n $previous ] && [ "$previous" = '-r' ]; then
        # we don't need validation for -r param
        true
      elif [ -n $previous ] && [ "$previous" = '--branch' ]; then
        # we don't need validation for --branch param
        true
      elif [ -n $previous ] && [ "$previous" = '-b' ]; then
        # we don't need validation for -b param
        true
      elif [ -z "$COMMAND" ] || [ "$COMMAND" != 'run' ]; then
        INVALID_OPTIONS=true
      fi
      ;;
  esac
  previous=$i
done

info() {
  if ! $DUMMY_MODE && $VERBOSE; then
    GRAY=$(tput bold; tput setaf 8)
    ENDCOLOR=$(tput sgr0)
    echo "${GRAY}[HOLODEV] $@${ENDCOLOR}"
  fi
}

: <<=cut
=pod

Features:

=over

=item *

Naming containers is automatic defined, the C<holodev> creates Linux Containers
(LXC) using the current directory plus the C<git branch> to compose the
container name, it covers the scenario where, for each project (directory),
there is a Linux Container, so that it is not necessary to install development
dependecies to your system.

For example, if I'm working on I<Noosfero> project and I have a clone of the
sources in the F<noosfero> directory, and if I'm on the git branch F<master> it
will create a container called B<noosfero-master> when I call C<holodev create>:

    ~/src/noosfero$ holodev create

The container B<noosfero-master> will be created with Debian Jessie (default).
If you wish to inform another version of Debian just use the C<--release>
option:

   ~/src/noosfero$ holodev create --release stretch

If you do not want to use the I<git branch name> to compose the container name,
use the option C<--no-branch>:

   ~/src/noosfero$ holodev create --no-branch

This will create a container called just B<noosfero>.

=cut

if $NO_GIT_BRANCH || [ -z $GIT_BRANCH ]; then
  CONTAINER_NAME=$CURRENT_DIRECTORY
else
  CONTAINER_NAME=$CURRENT_DIRECTORY-$(echo $GIT_BRANCH | sed 's/\//-/g')
fi

highlight() {
  if ! $QUIET; then
    YELLOW=$(tput bold; tput setaf 3)
    ENDCOLOR=$(tput sgr0)
    echo "${YELLOW}[HOLODEV] $@${ENDCOLOR}"
  fi
}

error() {
  RED=$(tput bold; tput setaf 1)
  ENDCOLOR=$(tput sgr0)
  echo "${RED}[HOLODEV] $@${ENDCOLOR}"
}

compare_version() {
  VER1=$(echo $1 | sed 's/\.//g')
  VER2=$(echo $2 | sed 's/\.//g')
  [ $VER1 -ge $VER2 ]
}

explain() {
  if ! $QUIET; then
    CYAN=$(tput setaf 6)
    ENDCOLOR=$(tput sgr0)
    echo "${CYAN}[HOLODEV] $@${ENDCOLOR}"
  fi
}

run() {
  if $DUMMY_MODE; then
    explain "sudo $@"
  else
    explain "sudo $@"
    sudo "$@"
  fi
}

container_exists() {
  N=$(run lxc-info -s -n $CONTAINER_NAME 2>&1 | grep --count 'State:')
  [ $N -gt 0 ]
}

is_container_stopped() {
  CONTAINER_STATUS=$(run lxc-info -s -n $CONTAINER_NAME)
  echo $CONTAINER_STATUS | grep STOPPED > /dev/null
}

start_if_stopped() {
  if is_container_stopped; then
    do_start
  fi
}

: <<=cut
=pod

=item *

When creating containers the holodev creates LXC configuration file under
F<< /var/lib/lxc/<CONTAINER_NAME>/config >> for each container. See an
example of the F<config> file:

   lxc.net.0.type = veth
   lxc.net.0.link = virbr0
   lxc.mount.entry = <PWD> /var/lib/lxc/<CONTAINER_NAME>/rootfs/<HOME>/<PROJECT> none bind 0 0
   lxc.apparmor.allow_incomplete = 1
   lxc.apparmor.profile = unconfined

=cut

create_default_configuration_file() {
  info "creating default configuration file"
  run sh -c "sed -i 's/lxc.network./#lxc.network./' /var/lib/lxc/$CONTAINER_NAME/config"
  run sh -c "echo >> /var/lib/lxc/$CONTAINER_NAME/config"
  run sh -c "echo \# holodev configurations >> /var/lib/lxc/$CONTAINER_NAME/config"
  run sh -c "echo lxc.net.0.type = veth >> /var/lib/lxc/$CONTAINER_NAME/config"
  run sh -c "echo lxc.net.0.link = virbr0 >> /var/lib/lxc/$CONTAINER_NAME/config"
  # mount current curectory (suppose is the source-code of project i'm working on) into container
  run sh -c "echo lxc.mount.entry = `pwd` /var/lib/lxc/$CONTAINER_NAME/rootfs/$HOME_DIRECTORY/$CURRENT_DIRECTORY none bind 0 0 >> /var/lib/lxc/$CONTAINER_NAME/config"
  run sh -c "echo lxc.apparmor.allow_incomplete = 1 >> /var/lib/lxc/$CONTAINER_NAME/config"
  run sh -c "echo lxc.apparmor.profile = unconfined >> /var/lib/lxc/$CONTAINER_NAME/config"
}

lxc_attach() {
  if [ $OS = 'Arch' ]; then
    run lxc-attach --clear-env -n $CONTAINER_NAME -- "$@"
  else
    run lxc-attach -n $CONTAINER_NAME -- "$@"
  fi
}

: <<=cut
=pod

=item *

holodev creates a user into container using the same username in use on host
machine.

=cut

create_user_into_container() {
  info "creating my user into the container"
  if $DUMMY_MODE || ! sudo grep $HOST_USER /var/lib/lxc/$CONTAINER_NAME/rootfs/etc/passwd > /dev/null; then
    lxc_attach adduser --system --shell /bin/bash --home /$HOME_DIRECTORY --uid $HOST_UID --disabled-password --quiet $HOST_USER
    lxc_attach chown $HOST_USER:nogroup /$HOME_DIRECTORY
  fi
}

: <<=cut
=pod

=item *

The user created into the container by holodev is added to sudo into the
container machine.

=cut

add_user_to_sudo() {
  info "adding the user created in the container to sudo"
  if ! sudo test -e /var/lib/lxc/$CONTAINER_NAME/rootfs/etc/sudoers.d/sudo-group-nopasswd; then
    lxc_attach apt-get update
    lxc_attach apt-get -y install debian-archive-keyring sudo
    run sh -c "echo '%sudo ALL=(ALL) NOPASSWD:ALL' > /var/lib/lxc/$CONTAINER_NAME/rootfs/etc/sudoers.d/sudo-group-nopasswd"
    lxc_attach adduser $HOST_USER sudo
  fi
}

: <<=cut
=pod

=item *

holodev copy some files and directories from host machine into the container,
only the files available on host machine under the home of user running holodev
are copied.

=over

=item *

F<~/.gnupg>

=item *

F<~/.ssh>

=item *

F<~/.gitconfig>

=back

=cut

copy_dot_files_into_container() {
  info "copying dot files (gnupg, ssh, gitconfig, etc) into the container"
  if [ -d ~/.gnupg ]; then
    run sh -c "cp -r ~$HOST_USER/.gnupg /var/lib/lxc/$CONTAINER_NAME/rootfs/$HOME_DIRECTORY/"
    run sh -c "chown -R $HOST_USER /var/lib/lxc/$CONTAINER_NAME/rootfs/$HOME_DIRECTORY/.gnupg"
  fi
  if [ -d ~/.ssh ]; then
    run sh -c "cp -r ~$HOST_USER/.ssh /var/lib/lxc/$CONTAINER_NAME/rootfs/$HOME_DIRECTORY/"
    run sh -c "chown -R $HOST_USER /var/lib/lxc/$CONTAINER_NAME/rootfs/$HOME_DIRECTORY/.ssh"
  fi
  if [ -f ~/.gitconfig ]; then
    run sh -c "cp ~$HOST_USER/.gitconfig /var/lib/lxc/$CONTAINER_NAME/rootfs/$HOME_DIRECTORY/"
    run sh -c "chown -R $HOST_USER /var/lib/lxc/$CONTAINER_NAME/rootfs/$HOME_DIRECTORY/.gitconfig"
  fi
}

ensure_UTF8_under_container() {
  info "enabling UTF-8 under container"
  lxc_attach locale-gen "$LANG.UTF-8"
  lxc_attach update-locale LANG=$LANG.UTF-8 LC_ALL=$LANG.UTF-8
}

setup_libvirt_Debian() {
  NET_AUTOSTART=$(sudo virsh net-info default | grep Autostart: | awk '{print $2}')
  NET_ACTIVE=$(sudo virsh net-info default | grep Active: | awk '{print $2}')
  if [ -n $NET_AUTOSTART ] && [ "$NET_AUTOSTART" != 'yes' ]; then
    sudo virsh net-autostart default
  fi
  if [ -n $NET_ACTIVE ] && [ "$NET_ACTIVE" != 'yes' ]; then
    sudo virsh net-start default
  fi
  sudo systemctl enable libvirt-guests
}

setup_libvirt_Ubuntu() {
  setup_libvirt_Debian
}

setup_libvirt_Suse() {
  setup_libvirt_Debian
}

setup_libvirt_Arch() {
  while systemctl list-units  | grep libvirt-guests.service | grep -q "deactivating"; do
    sleep 2s
  done
  while [ ! -S /var/run/libvirt/libvirt-sock ]; do
    sleep 2s
  done
  setup_libvirt_Debian
}

setup_libvirt_Linux() {
  setup_libvirt_Debian
}

setup_libvirt_Fedora() {
  setup_libvirt_Debian
}

: <<=cut
=back

=head1 COMMANDS

=over

=item restart

Restart the container associated with the current directory.

=cut

do_restart() {
  do_stop
  do_start
}

: <<=cut
=item attach

Connect to the container console, if the container is stopped holodev first
start then attach.

=cut

do_attach() {
  start_if_stopped
  lxc_attach su - $HOST_USER
}

: <<=cut
=item setup

This command must not be used directly, it is used by installing process,
for example Debian package calls this command after package installation.

=cut

do_setup() {
  which sudo > /dev/null; if [ $? -ne 0 ]; then
    echo
    error "sudo not found!" 1>&2
    error "Please install sudo first and add yourself to the sudo group"
    exit 4
  fi

  sudo which brctl > /dev/null; if [ $? -ne 0 ]; then
    echo
    error "brctl not found!" 1>&2
    error "Please install bridge-utils first and run 'setup' again"
    exit 4
  fi

  virbr0=$(sudo brctl show | grep virbr0 2>&1)
  if [ -z "$virbr0" ]; then
    info "configuring 'virbr0' virtual network device..."
    setup_libvirt_$OS
  fi
}

: <<=cut
=item create

Create new LXC container using directory name and git branch to compose the
container name, it is possible to specify the branch name using C<--branch>
option or C<--no-branch> to ignores branch name.

=cut

do_create() {
  highlight "creating '$CONTAINER_NAME' with Debian '$DEBIAN_RELEASE'"

  if container_exists; then
    echo "container '$CONTAINER_NAME' already exists";
    exit 3
  fi

  if ! sudo test -d /var/lib/lxc/$CONTAINER_NAME; then
    # create container, deboostrap debian
    if [ ! -z $ARCH ]; then
      run LC_ALL=$LANG lxc-create -n $CONTAINER_NAME -t debian -- -r $DEBIAN_RELEASE -a $ARCH
    else
      run LC_ALL=$LANG lxc-create -n $CONTAINER_NAME -t debian -- -r $DEBIAN_RELEASE
    fi
  else
    echo "directory '/var/lib/lxc/$CONTAINER_NAME' already exists, please remove it before";
    exit 3
  fi

  # create directory into container to mount project sources I'm working on
  if ! sudo test -d /var/lib/lxc/$CONTAINER_NAME/rootfs/$HOME_DIRECTORY/$CURRENT_DIRECTORY; then
    run sh -c "mkdir -p /var/lib/lxc/$CONTAINER_NAME/rootfs/$HOME_DIRECTORY/$CURRENT_DIRECTORY"
    run sh -c "echo 'cd /$HOME_DIRECTORY/$CURRENT_DIRECTORY' > /var/lib/lxc/$CONTAINER_NAME/rootfs/$HOME_DIRECTORY/.bash_profile"
    run sh -c "chown -R $HOST_USER /var/lib/lxc/$CONTAINER_NAME/rootfs/$HOME_DIRECTORY/.bash_profile"
  fi

  create_default_configuration_file
  start_if_stopped
  create_user_into_container
  add_user_to_sudo
  copy_dot_files_into_container
  ensure_UTF8_under_container
}

: <<=cut
=item info

Get info about a container through L<lxc-info(1)> command.

=cut

do_info() {
  run lxc-info -n $CONTAINER_NAME
}

: <<=cut
=item run

Run an arbitrary command inside the container (it start the container if it is
stopped).

=cut

do_run() {
  COMMAND="$@"
  start_if_stopped
  lxc_attach su - $HOST_USER -c "$COMMAND"
}

online() {
  lxc_attach find /sys/class/net/ -maxdepth 1 -mindepth 1 ! -name "*lo*" -exec sh -c 'cat "$0"/carrier 2>&1 > /dev/null | grep -q "1" && exit 0' {} \;
}

up_network() {
  # be sure network is up and running
  if lxc_attach which systemctl > /dev/null; then
    RETRY=5
    info "checking if systemd is active"
    while [ $RETRY -gt 0 ]; do
      if lxc_attach systemctl 2>&1 | grep -q -e 'Unknown error -1'; then
        RETRY=$((RETRY - 1))
        sleep 1s
      else
        RETRY=0
        SYSTEMD_IS_ACTIVE=true
      fi
    done
    if [ $SYSTEMD_IS_ACTIVE ]; then
      info "waiting the system be operational"
      IS_SYSTEM_RUNNING=$(lxc_attach systemctl is-system-running)
      RETRY=5
      while [ $RETRY -gt 0 ]; do
        if ! echo $IS_SYSTEM_RUNNING | grep -q -e 'degraded' -e 'running'; then
          sleep 2s
          IS_SYSTEM_RUNNING=$(lxc_attach systemctl is-system-running)
          RETRY=$((RETRY - 1))
        else
          RETRY=0
        fi
      done
      lxc_attach systemctl enable systemd-networkd.service
      lxc_attach systemctl start systemd-networkd.service
    fi
  fi
  lxc_attach service networking start
  RETRY=10
  info "waiting for internet connection (timeout: 10 seconds)"
  while [ $RETRY -gt 0 ]; do
    if [ online ]; then
      info "we have connection, going ahead"
      RETRY=0
    else
      info "(sleep 1s)"
      RETRY=$((RETRY - 1))
      sleep 1s
    fi
  done
}

: <<=cut
=item start

Executes C<lxc-start> in background mode and wait the container up and RUNNING,
initialize the network service on the container.

=cut

do_start() {
  run lxc-start -n $CONTAINER_NAME -d
  run lxc-wait -n $CONTAINER_NAME -s RUNNING
  up_network
}

: <<=cut
=item stop

Stop the container with C<lxc-stop> command.

=cut

do_stop() {
  run lxc-stop -n $CONTAINER_NAME
}

: <<=cut
=item destroy

Force remotion of the container with C<lxc-destroy>
command.

=cut

do_destroy() {
  run lxc-destroy -n $CONTAINER_NAME -f -s
}

: <<=cut
=item list

List all containers match the current directory name, is C<--all> option
is passed then directory name is ignored and all LXC containers are listed.

=back
=cut

do_list() {
  if $ARGV_ALL; then
    run lxc-ls -1
  else
    run lxc-ls -1 "^$CURRENT_DIRECTORY-|^$CURRENT_DIRECTORY$"
  fi
}

do_snapshot() {
  do_stop
  run lxc-snapshot -n $CONTAINER_NAME $LXC_OPTIONS
}

do_help() {
  pod2usage $0
}

if [ -z $COMMAND ] || $INVALID_OPTIONS; then
  error "missing command or invalid options" >&2
  do_help
  exit 2
fi

do_$COMMAND "$@"
exit 0

: <<=cut
=head1 OPTIONS

=over

=item --no-branch

Use only the name of current directory as container name.

=item --branch I<< <git-branch-name> >>, -b I<< <git-branch-name> >>

By default, the current branch name is used (the HEAD), but it is possible
to change the branch name to be used to compose de container name, for example,
if the current directory is F<noosfero> and current branch name is F<master> when
I execute the C<holodev create --branch stable> then the LXC container name will
be B<noosfero-stable>.

=item --release I<< <debian-release-name> >>, -r I<< <debian-release-name> >>

Specify the version of Debian used in new containers (default: stretch), eg
creating Debian version 8, Stretch:

   holodev create --release stretch

=item --dummy

Only simulate what C<holodev> do for each command.

=item --all

This option can be used with C<list> command.

=item --arch I<< <architecture> >>

Set the container architecture, default is the same architecture of host
machine.

=item --version

Show the version number.

=back

=head1 EXAMPLES

Create fresh container with Debian Jessie:

   holodev create --release jessie

Attach to the console of the container:

   holodev attach

=head1 SEE ALSO

L<lxc(7)>, L<lxc-create(1)>, L<git(1)>, L<git-branch(1)>

=head1 LICENSE

GNU GPLv2+

=head1 AUTHOR

See F<README.md> file.

=cut
