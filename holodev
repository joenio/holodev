#!/bin/sh

HOST_USER=$USER
HOST_UID=$(getent passwd | grep "^$USER:" | cut -d":" -f3)
CURRENT_DIRECTORY=$(basename `pwd`)
MOUNT_POINT=$(echo $CURRENT_DIRECTORY | tr '[:lower:]' '[:upper:]')
DEBIAN_RELEASE=wheezy
INVALID_OPTIONS=false
NO_GIT_BRANCH=false
GIT_BRANCH=
CONTAINER_NAME=
LIST_ALL_CONTAINERS=false
# Detect OS
if [ -f /etc/lsb-release ]; then
    . /etc/lsb-release
    OS=$DISTRIB_ID
elif [ -f /etc/debian_version ]; then
    OS=Debian
elif [ -f /etc/arch-release ]; then
    OS=Arch
else
    OS=$(uname -s)
fi

is_under_git_control() {
  git rev-parse --is-inside-work-tree > /dev/null 2>&1
}

if is_under_git_control; then
  GIT_BRANCH=$(git describe --contains --all HEAD)
fi

for i in "$@"; do
  case $i in
    attach|create|destroy|info|list|restart|start|setup|stop)
      COMMAND=$i
      shift
      ;;
    run)
      COMMAND=$i
      shift
      break
      ;;
    --no-branch)
      NO_GIT_BRANCH=true
      shift
      ;;
    --branch)
      GIT_BRANCH=$2
      shift 2
      ;;
    --release)
      DEBIAN_RELEASE=$2
      shift 2
      ;;
    --version)
      shift
      echo 0.4
      exit 0
      ;;
    --all)
      LIST_ALL_CONTAINERS=true
      shift
      ;;
    jessie|sid|squeeze|stable|testing|wheezy)
      ;;
    *)
      BRANCH_EXISTS=$(git rev-parse --abbrev-ref --all | grep "^$i$")
      if [ -z $BRANCH_EXISTS ]; then
        echo "W: unknown option '$i'"
        INVALID_OPTIONS=true
      fi
      ;;
  esac
done

if $INVALID_OPTIONS; then
  exit 3
fi

if [ -z $COMMAND ]; then
  echo "E: missing command" >&2
  echo "" >&2
  echo "Usage: `basename $0` <command> [options]" >&2
  echo "" >&2
  echo "* command = {attach|create|destroy|info|list|restart|run|start|setup|stop}" >&2
  echo "* options = --no-branch" >&2
  echo "            --release <debian-codename>" >&2
  exit 2
fi

if $NO_GIT_BRANCH || [ -z $GIT_BRANCH ]; then
  CONTAINER_NAME=$CURRENT_DIRECTORY
else
  CONTAINER_NAME=$CURRENT_DIRECTORY-$GIT_BRANCH
fi

is_container_stopped() {
  CONTAINER_STATUS=$(sudo lxc-info -s -n $CONTAINER_NAME)
  echo $CONTAINER_STATUS | grep STOPPED > /dev/null
}

is_apparmor_enabled() {
  APPARMOR_STATUS=$(cat /sys/module/apparmor/parameters/enabled)
  echo $CONTAINER_STATUS | grep -e '^Y$' > /dev/null
}

start_if_stopped() {
  if is_container_stopped; then
    do_start
  fi
}

create_default_configuration_file() {
  echo "creating default configuration file"
  sudo sh -c "sed -i 's/lxc.network./#lxc.network./' /var/lib/lxc/$CONTAINER_NAME/config"
  sudo sh -c "echo >> /var/lib/lxc/$CONTAINER_NAME/config"
  sudo sh -c "echo \# holodev configurations >> /var/lib/lxc/$CONTAINER_NAME/config"
  sudo sh -c "echo lxc.network.type = veth >> /var/lib/lxc/$CONTAINER_NAME/config"
  sudo sh -c "echo lxc.network.link = virbr0 >> /var/lib/lxc/$CONTAINER_NAME/config"
  sudo sh -c "echo lxc.mount = /var/lib/lxc/$CONTAINER_NAME/fstab >> /var/lib/lxc/$CONTAINER_NAME/config"
  if is_apparmor_enabled; then
    sudo sh -c "echo lxc.aa_allow_incomplete = 1 >> /var/lib/lxc/$CONTAINER_NAME/config"
  fi
}

create_user_into_container() {
  echo "creating my user into the container"
  if ! sudo grep $HOST_USER /var/lib/lxc/$CONTAINER_NAME/rootfs/etc/passwd > /dev/null; then
    sudo lxc-attach -n $CONTAINER_NAME -- adduser --system --shell /bin/bash --home /$MOUNT_POINT --uid $HOST_UID --disabled-password --quiet $HOST_USER
    sudo lxc-attach -n $CONTAINER_NAME -- chown $HOST_USER:nogroup /$MOUNT_POINT
  fi
}

add_user_to_sudo() {
  echo "adding the user created in the container to sudo"
  if ! sudo test -e /var/lib/lxc/$CONTAINER_NAME/rootfs/etc/sudoers.d/sudo-group-nopasswd; then
    sudo lxc-attach -n $CONTAINER_NAME -- apt-get update
    sudo lxc-attach -n $CONTAINER_NAME -- apt-get -y install debian-archive-keyring sudo
    sudo lxc-attach -n $CONTAINER_NAME -- sh -c "echo '%sudo ALL=(ALL) NOPASSWD:ALL' > /etc/sudoers.d/sudo-group-nopasswd"
    sudo lxc-attach -n $CONTAINER_NAME -- adduser $HOST_USER sudo
  fi
}

highlight_echo() {
  message=$@
  YELLOW=$(tput bold; tput setaf 3)
  ENDCOLOR=$(tput sgr0)
  echo "${YELLOW}[HOLODEV] $message${ENDCOLOR}"
}

setup_libvirt_Debian() {
  sudo virsh net-autostart default
  sudo virsh net-start default
}

setup_libvirt_Ubuntu() {
  setup_libvirt_Debian
}

setup_libvirt_Arch() {
  sudo virsh net-autostart default
  sudo virsh net-start default
  echo "It is possible that you are using Archlinux"
  echo "Because of that, to continue setup, we need to change a lxc config file /etc/lxc/default.conf"
  echo "Creating backup file /etc/lxc/default.conf.bkp"
  if [ ! -f /etc/lxc/default.conf.bkp ]; then
    sudo cp /etc/lxc/default.conf{,.bkp}
  fi
sudo sh -c 'cat << EOF > /etc/lxc/default.conf
lxc.network.type = veth
lxc.network.link = virbr0
lxc.network.ipv4 = 0.0.0.0/24
EOF'
  sudo systemctl enable libvirtd.service libvirt-guests.service > /dev/null
  sudo systemctl restart libvirtd.service libvirt-guests.service > /dev/null
  while systemctl list-units  | grep libvirt-guests.service | grep -q "deactivating"; do
    sleep 2s
  done
}

do_restart() {
  do_stop
  do_start
}

do_attach() {
  highlight_echo "opening console to '$CONTAINER_NAME'"
  start_if_stopped
  sudo lxc-attach -n $CONTAINER_NAME -- su - $HOST_USER
}

do_setup() {
  which sudo > /dev/null; if [ $? -ne 0 ]; then
    echo
    echo "sudo not found!" 1>&2
    echo "Please install sudo first and add yourself to the sudo group"
    exit 4
  fi

  sudo which brctl > /dev/null; if [ $? -ne 0 ]; then
    echo
    echo "brctl not found!" 1>&2
    echo "Please install bridge-utils first and run 'setup' again"
    exit 4
  fi

  virbr0=$(sudo brctl show | grep virbr0 2>&1)
  if [ -z "$virbr0" ]; then
    echo "[HOLODEV] configuring 'virbr0' virtual network device..."
    setup_libvirt_$OS
  fi
}

do_create() {
  highlight_echo "creating '$CONTAINER_NAME' with '$DEBIAN_RELEASE'"

  # create container, deboostrap debian
  if [ ! -d /var/lib/lxc/$CONTAINER_NAME ]; then
    sudo lxc-create -n $CONTAINER_NAME -t debian -- -r $DEBIAN_RELEASE
  fi

  # mount current curectory (suppose is the source-code of project i'm working on) into container
  sudo sh -c "echo $(pwd) /var/lib/lxc/$CONTAINER_NAME/rootfs/$MOUNT_POINT none bind 0 0 > /var/lib/lxc/$CONTAINER_NAME/fstab"

  # create directory into container to mount project sources I'm working on
  if ! sudo test -d /var/lib/lxc/$CONTAINER_NAME/rootfs/$MOUNT_POINT; then
    sudo mkdir /var/lib/lxc/$CONTAINER_NAME/rootfs/$MOUNT_POINT
  fi

  create_default_configuration_file
  start_if_stopped
  create_user_into_container
  add_user_to_sudo
}

do_info() {
  highlight_echo "getting info about '$CONTAINER_NAME'"
  sudo lxc-info -n $CONTAINER_NAME
}

do_run() {
  COMMAND=$@
  highlight_echo "running '$COMMAND' under '$CONTAINER_NAME'"
  start_if_stopped
  sudo lxc-attach -n $CONTAINER_NAME -- su - $HOST_USER -c "$COMMAND"
}

do_start() {
  highlight_echo "starting '$CONTAINER_NAME'"
  sudo lxc-start -n $CONTAINER_NAME -d
  sudo lxc-wait -n $CONTAINER_NAME -s RUNNING
  # be sure network is up and running
  sudo lxc-attach -n $CONTAINER_NAME -- service networking start
}

do_stop() {
  highlight_echo "stopping '$CONTAINER_NAME'"
  sudo lxc-stop -n $CONTAINER_NAME
}

do_destroy() {
  highlight_echo "destroing '$CONTAINER_NAME'"
  sudo lxc-destroy -n $CONTAINER_NAME -f
}

do_list() {
  highlight_echo "listing containers"
  if $LIST_ALL_CONTAINERS; then
    sudo lxc-ls -1
  else
    sudo lxc-ls -1 $CURRENT_DIRECTORY
  fi
}

do_$COMMAND $@
exit 0
